// Generated by CoffeeScript 1.6.3
(function() {
  var ASObject, AggregatedStatsPacket, AuthPacket, ConnectPacket, Decoder, Encoder, GetSummonerDataPacket, GetTeamById, GetTeamForSummoner, HeartbeatPacket, CreateGamePacket, LoginPacket, LookupPacket, GetCurrentGamePacket, InvitePacket, Packet, PlayerStatsPacket, RecentGames, uuid, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  uuid = require('node-uuid');

  Encoder = require('namf/amf0').Encoder;

  Decoder = require('namf/amf0').Decoder;

  ASObject = require('namf/messaging').ASObject;

   util = require('util');

  Packet = (function() {
    function Packet(options) {
      this.options = options;
    }

    return Packet;

  })();

  ConnectPacket = (function(_super) {
    __extends(ConnectPacket, _super);

    function ConnectPacket() {
      _ref = ConnectPacket.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ConnectPacket.prototype.appObject = function() {
      var object;   
      object = {
        app: '',
        flashVer: 'WIN 10,1,85,3',
        swfUrl: 'app:/mod_ser.dat',
        tcUrl: 'rtmps://beta.lol.riotgames.com:2099',
        fpad: false,
        capabilities: 239,
        audioCodecs: 3191,
        videoCodecs: 252,
        videoFunction: 1,
        pageUrl: void 0,
        objectEncoding: 3
      };
      return object;
    };

    ConnectPacket.prototype.commandObject = function() {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.CommandMessage';
      object.object = {
        operation: 5,
        correlationId: '',
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: '9DC6600E-8F54-604F-AB39-1515B4CBE8AA',
        destination: '',
        headers: {
          DSMessagingVersion: 1,
          DSId: 'my-rtmps'
        },
        body: {}
      };
      return object;
    };

    return ConnectPacket;

  })(Packet);

  LoginPacket = (function(_super) {
    __extends(LoginPacket, _super);

    function LoginPacket() {
      LoginPacket.__super__.constructor.apply(this, arguments);
      console.log(this.options);
    }

    LoginPacket.prototype.generate = function(clientVersion) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['operation', 'source', 'timestamp', 'clientId', 'timeToLive', 'messageId', 'destination', 'headers', 'body'];
      object.object = {
        operation: 'login',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'loginService',
        headers: this.generateHeaders(),
        body: [this.generateBody(clientVersion)]
      };
      object.encoding = 0;
      return object;
    };

    LoginPacket.prototype.generateHeaders = function() {
      var headers;
      
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    LoginPacket.prototype.generateBody = function(clientVersion) {
      var body;
      if (clientVersion == null) {
        clientVersion = '1.48.11_11_14_04_20';
      }
      body = new ASObject();
      body.name = 'com.riotgames.platform.login.AuthenticationCredentials';
      body.keys = ['oldPassword', 'password', 'authToken', 'locale', 'partnerCredentials', 'ipAddress', 'domain', 'username', 'clientVersion', 'securityAnswer'];
      body.object = {
        oldPassword: null,
        password: this.options.password,
        authToken: this.options.queueToken,
        locale: 'en_US',
        partnerCredentials: null,
        ipAddress: '203.59.95.218',
        domain: 'lolclient.lol.riotgames.com',
        username: this.options.username,
        clientVersion: clientVersion,
        securityAnswer: null
      };
      body.encoding = 0;
      return body;
    };

    return LoginPacket;

  })(Packet);

  AuthPacket = (function(_super) {
    __extends(AuthPacket, _super);

    function AuthPacket() {
      _ref1 = AuthPacket.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    AuthPacket.prototype.generate = function() {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.CommandMessage';
      object.keys = ['operation', 'correlationId', 'timestamp', 'clientId', 'timeToLive', 'messageId', 'destination', 'headers', 'body'];
      object.object = {
        operation: 8,
        correlationId: '',
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'auth',
        headers: this.generateHeaders(),
        body: new Buffer("" + this.options.username + ":" + this.options.authToken, 'utf8').toString('base64')
      };
      object.encoding = 0;
      return object;
    };

    AuthPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return AuthPacket;

  })(Packet);

   GNPacket = (function(_super) {
    __extends(GNPacket, _super);

    function GNPacket() {
      _ref11 = GNPacket.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    GNPacket.prototype.generate = function(acctId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.CommandMessage';
      object.keys = ['operation', 'correlationId', 'timestamp', 'clientId', 'timeToLive', 'messageId', 'destination', 'headers', 'body'];
      object.object = {
        operation: 8,
        correlationId: '',
        timestamp: 0,
        clientId: 'gn-' + acctId,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'messagingDestination',
        headers: this.generateHeaders(acctId),
        body: null
      };
      object.encoding = 0;
      return object;
    };


    GNPacket.prototype.generateHeaders = function(acctId) {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSSSubtopic: 'gn-' + acctId,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };
/*
     GNPacket.prototype.generateBody = function() {
      var body;
      body = new ASObject();
      
      return body;
    };
*/

    return GNPacket;

  })(Packet);

  CNPacket = (function(_super) {
    __extends(CNPacket, _super);

    function CNPacket() {
      _ref12 = CNPacket.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    CNPacket.prototype.generate = function(acctId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.CommandMessage';
      object.keys = ['operation', 'correlationId', 'timestamp', 'clientId', 'timeToLive', 'messageId', 'destination', 'headers', 'body'];
      object.object = {
        operation: 8,
        correlationId: '',
        timestamp: 0,
        clientId: 'cn-' + acctId,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'messagingDestination',
        headers: this.generateHeaders(acctId),
        body: null
      };
      object.encoding = 0;
      return object;
    };


    CNPacket.prototype.generateHeaders = function(acctId) {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSSSubtopic: 'cn-' + acctId,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };
/*
     CNPacket.prototype.generateBody = function() {
      var body;
      body = new ASObject();
      
      return body;
    };

*/
    return CNPacket;

  })(Packet);

    BCPacket = (function(_super) {
    __extends(BCPacket, _super);

    function BCPacket() {
      _ref13 = BCPacket.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    BCPacket.prototype.generate = function(acctId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.CommandMessage';
      object.keys = ['operation', 'correlationId', 'timestamp', 'clientId', 'timeToLive', 'messageId', 'destination', 'headers', 'body'];
      object.object = {
        operation: 8,
        correlationId: '',
        timestamp: 0,
        clientId: 'bc-' + acctId,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'messagingDestination',
        headers: this.generateHeaders(),
        body: null //this.generateBody()
      };
      object.encoding = 0;
      return object;
    };


    BCPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSSSubtopic: 'bc',
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };
/*
     BCPacket.prototype.generateBody = function() {
      var body;
      body = new ASObject();
      
      return body;
    };
    */


    return BCPacket;

  })(Packet);

  HeartbeatPacket = (function(_super) {
    __extends(HeartbeatPacket, _super);

    function HeartbeatPacket() {
      _ref2 = HeartbeatPacket.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    HeartbeatPacket.prototype.counter = 1;

    HeartbeatPacket.prototype.generate = function() {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['operation', 'source', 'timestamp', 'clientId', 'timeToLive', 'messageId', 'destination', 'headers', 'body'];
      object.object = {
        operation: 'performLCDSHeartBeat',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'loginService',
        headers: this.generateHeaders(),
        body: [this.options.acctId, this.options.authToken, this.counter, new Date().toString().slice(0, -6)]
      };
      object.encoding = 0;
      this.counter += 1;
      return object;
    };

    HeartbeatPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return HeartbeatPacket;

  })(Packet);

  LookupPacket = (function(_super) {
    __extends(LookupPacket, _super);

    function LookupPacket() {
      _ref3 = LookupPacket.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    LookupPacket.prototype.generate = function(name) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'getSummonerByName',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'summonerService',
        headers: this.generateHeaders(),
        body: [name]
      };
      object.encoding = 0;
      return object;

    };

    LookupPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return LookupPacket;

  })(Packet);

  GetSummonerDataPacket = (function(_super) {
    __extends(GetSummonerDataPacket, _super);

    function GetSummonerDataPacket() {
      _ref4 = GetSummonerDataPacket.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    GetSummonerDataPacket.prototype.generate = function(acctId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'getAllPublicSummonerDataByAccount',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'summonerService',
        headers: this.generateHeaders(),
        body: [acctId]
      };
      object.encoding = 0;
      return object;
    };

    GetSummonerDataPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return GetSummonerDataPacket;

  })(Packet);

   

  AggregatedStatsPacket = (function(_super) {
    __extends(AggregatedStatsPacket, _super);

    function AggregatedStatsPacket() {
      _ref5 = AggregatedStatsPacket.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    AggregatedStatsPacket.prototype.generate = function(acctId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'getAggregatedStats',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'playerStatsService',
        headers: this.generateHeaders(),
        body: [acctId, 'CLASSIC', 2]
      };
      object.encoding = 0;
      return object;
    };

    AggregatedStatsPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return AggregatedStatsPacket;

  })(Packet);

  PlayerStatsPacket = (function(_super) {
    __extends(PlayerStatsPacket, _super);

    function PlayerStatsPacket() {
      _ref6 = PlayerStatsPacket.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    PlayerStatsPacket.prototype.generate = function(acctId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'retrievePlayerStatsByAccountId',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'playerStatsService',
        headers: this.generateHeaders(),
        body: [acctId, 2]
      };
      object.encoding = 0;
      return object;
    };

    PlayerStatsPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return PlayerStatsPacket;

  })(Packet);

  RecentGames = (function(_super) {
    __extends(RecentGames, _super);

    function RecentGames() {
      _ref7 = RecentGames.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    RecentGames.prototype.generate = function(acctId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'getRecentGames',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'playerStatsService',
        headers: this.generateHeaders(),
        body: [acctId]
      };
      object.encoding = 0;
      return object;
    };

    RecentGames.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return RecentGames;

  })(Packet);

  GetTeamForSummoner = (function(_super) {
    __extends(GetTeamForSummoner, _super);

    function GetTeamForSummoner() {
      _ref8 = GetTeamForSummoner.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    GetTeamForSummoner.prototype.generate = function(summonerId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'findPlayer',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'summonerTeamService',
        headers: this.generateHeaders(),
        body: [summonerId]
      };
      object.encoding = 0;
      return object;
    };

    GetTeamForSummoner.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return GetTeamForSummoner;

  })(Packet);

  GetTeamById = (function(_super) {
    __extends(GetTeamById, _super);

    function GetTeamById() {
      _ref9 = GetTeamById.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    GetTeamById.prototype.generate = function(teamId) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'findTeamById',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'summonerTeamService',
        headers: this.generateHeaders(),
        body: [this.generateBody(teamId)]
      };
      object.encoding = 0;
      return object;
    };

    GetTeamById.prototype.generateBody = function(teamId) {
      var body;
      body = new ASObject();
      body.name = 'com.riotgames.team.TeamId';
      body.keys = ['dataVersion', 'fullId', 'futureData'];
      body.object = {
        dataVersion: null,
        fullId: teamId,
        futureData: null
      };
      body.encoding = 0;
      return body;
    };

    GetTeamById.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return GetTeamById;

  })(Packet);

  //Added method for getting current game by name.
  GetCurrentGamePacket = (function(_super) {
    __extends(GetCurrentGamePacket, _super);

    function GetCurrentGamePacket() {
      _ref10 = GetCurrentGamePacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    GetCurrentGamePacket.prototype.generate = function(name) {
      var object;
      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'retrieveInProgressSpectatorGameInfo',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'gameService',
        headers: this.generateHeaders(),
        body: [name]
      };
      object.encoding = 0;
      return object;
    };

    GetCurrentGamePacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return GetCurrentGamePacket;

  })(Packet);

  //Added method for getting current game by name.
  CreateGamePacket = (function(_super) {
    __extends(CreateGamePacket, _super);

    function CreateGamePacket() {
      _ref10 = CreateGamePacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    CreateGamePacket.prototype.generate = function(name) {
      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'joinOrCreatePracticeGame',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'gameService',
        headers: this.generateHeaders(),
        body:  this.generatePraticeBody(name)
      };
      object.encoding = 0;
      return object;
    };

    CreateGamePacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    CreateGamePacket.prototype.generatePraticeBody = function(name) {
        var body;
        var map;
        body = new ASObject();
        map = new ASObject();
        
        map.name = "com.riotgames.platform.game.map.GameMap";
        map.keys = ['mapId', 'name', 'displayName', 'description', 'totalPlayer', 'mincustomPlayers'];
        map.object = 
        {
            mapId : 1,
            name : "SummonersRift",
            displayName : "Summoner's Rift",
            description : "The oldest and most venerated Field of Justice is known as Summoner's Rift.  This battleground is known for the constant conflicts fought between two opposing groups of Summoners.  Traverse down one of three different paths in order to attack your enemy at their weakest point.  Work with your allies to siege the enemy base and destroy their Headquarters!",
            totalPlayers : 10,
            minCustomPlayers : 1
        };
 
      body.name = 'com.riotgames.platform.game.PracticeGameConfig';
      body.keys = ['passbackDataPacket', 'gamePassword', 'passbackUrl', 'maxNumPlayers', 'gameTypeConfig', 'gameName', 'gameMap', 'allowSpectators' ];
      body.object = {
        passbackDataPacket : '',
        gamePassword : 'zen',
        passbackUrl : '',
        maxNumPlayers : 10,
        gameTypeConfig : 1,
        gameName : name,
        gameMap : map,
        gameMode : "CLASSIC",
        allowSpectators : "ALL"
        };
   
      console.log(util.inspect(body, false, null, true));
      return body;
    };

    return CreateGamePacket;

  })(Packet);

  //Added method for getting current game by name.
  InvitePacket = (function(_super) {
    __extends(InvitePacket, _super);

    function InvitePacket() {
      _ref10 = InvitePacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    InvitePacket.prototype.generate = function(sum_id) {
      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'invite',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'lcdsGameInvitationService',
        headers: this.generateHeaders(),
        body: [ sum_id ]
      };
      object.encoding = 0;
      return object;
    };

    InvitePacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return InvitePacket;

  })(Packet);

  //Added method for getting current game by name.
  TransferOwnershipPacket = (function(_super) {
    __extends(TransferOwnershipPacket, _super);

    function TransferOwnershipPacket() {
      _ref10 = TransferOwnershipPacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    TransferOwnershipPacket.prototype.generate = function(sum_id) {
      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'transferOwnership',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'lcdsGameInvitationService',
        headers: this.generateHeaders(),
        body: [ sum_id ]
      };
      object.encoding = 0;
      return object;
    };

    TransferOwnershipPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return TransferOwnershipPacket;

  })(Packet);

  //Added method for getting current game by name.
  LeavePacket = (function(_super) {
    __extends(LeavePacket, _super);

    function LeavePacket() {
      _ref10 = LeavePacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    LeavePacket.prototype.generate = function(sum_id) {
      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'leave',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'lcdsGameInvitationService',
        headers: this.generateHeaders(),
        body: [  ]
      };
      object.encoding = 0;
      return object;
    };

    LeavePacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return LeavePacket;

  })(Packet);

  //Added method for getting current game by name.
  PendingInvitationsPacket = (function(_super) {
    __extends(PendingInvitationsPacket, _super);

    function PendingInvitationsPacket() {
      _ref10 = PendingInvitationsPacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    PendingInvitationsPacket.prototype.generate = function(sum_id) {
      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'getPendingInvitations',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'lcdsGameInvitationService',
        headers: this.generateHeaders(),
        body: [  ]
      };
      object.encoding = 0;
      return object;
    };

    PendingInvitationsPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return PendingInvitationsPacket;

  })(Packet);

  //Added method for getting current game by name.
  PlayerToObserverPacket = (function(_super) {
    __extends(PlayerToObserverPacket, _super);

    function PlayerToObserverPacket() {
      _ref10 = PlayerToObserverPacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    PlayerToObserverPacket.prototype.generate = function(game_id) {
      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'switchPlayerToObserver',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'gameService',
        headers: this.generateHeaders(),
        body: [ game_id ]
      };
      object.encoding = 0;
      return object;
    };

    PlayerToObserverPacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return PlayerToObserverPacket;

  })(Packet);

  //Added method for getting current game by name.
  GetLatestGameTimerStatePacket = (function(_super) {
    __extends(GetLatestGameTimerStatePacket, _super);

    function GetLatestGameTimerStatePacket() {
      _ref10 = GetLatestGameTimerStatePacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    GetLatestGameTimerStatePacket.prototype.generate = function(game_id) {

      console.log("checking " + game_id);      

      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'getLatestGameTimerState',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'gameService',
        headers: this.generateHeaders(),
        body: [ game_id ]
      };
      object.encoding = 0;
      return object;
    };

    GetLatestGameTimerStatePacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return GetLatestGameTimerStatePacket;

  })(Packet);

  //Added method for getting current game by name.
  AcceptInvitePacket = (function(_super) {
    __extends(AcceptInvitePacket, _super);

    function AcceptInvitePacket() {
      _ref10 = AcceptInvitePacket.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    AcceptInvitePacket.prototype.generate = function(invitation_id) {

      console.log("checking " + game_id);      

      var object;

      object = new ASObject();
      object.name = 'flex.messaging.messages.RemotingMessage';
      object.keys = ['source', 'operation', 'timestamp', 'messageId', 'clientId', 'timeToLive', 'body', 'destination', 'headers'];
      object.object = {
        operation: 'accept',
        source: null,
        timestamp: 0,
        clientId: null,
        timeToLive: 0,
        messageId: uuid().toUpperCase(),
        destination: 'lcdsGameInvitationService',
        headers: this.generateHeaders(),
        body: [ invitation_id ]
      };
      object.encoding = 0;
      return object;
    };

    AcceptInvitePacket.prototype.generateHeaders = function() {
      var headers;
      headers = new ASObject();
      headers.name = '';
      headers.object = {
        DSId: this.options.dsid,
        DSRequestTimeout: 60,
        DSEndpoint: 'my-rtmps'
      };
      headers.encoding = 2;
      return headers;
    };

    return AcceptInvitePacket;

  })(Packet);

  exports.ConnectPacket = ConnectPacket;
  exports.LoginPacket = LoginPacket;
  exports.AuthPacket = AuthPacket;
  exports.HeartbeatPacket = HeartbeatPacket;
  exports.LookupPacket = LookupPacket;
  exports.GetSummonerDataPacket = GetSummonerDataPacket;
  exports.AggregatedStatsPacket = AggregatedStatsPacket;
  exports.PlayerStatsPacket = PlayerStatsPacket;
  exports.RecentGames = RecentGames;
  exports.GetTeamForSummoner = GetTeamForSummoner;
  exports.GetTeamById = GetTeamById;
  exports.GetCurrentGamePacket = GetCurrentGamePacket;
  exports.BCPacket = BCPacket;
  exports.CNPacket = CNPacket;
  exports.GNPacket = GNPacket;
  exports.CreateGamePacket = CreateGamePacket;
  exports.HeartbeatPacket = HeartbeatPacket;
  exports.InvitePacket = InvitePacket;
  exports.TransferOwnershipPacket = TransferOwnershipPacket;
  exports.LeavePacket = LeavePacket;
  exports.PendingInvitationsPacket = PendingInvitationsPacket;
  exports.PlayerToObserverPacket = PlayerToObserverPacket;
  exports.GetLatestGameTimerStatePacket = GetLatestGameTimerStatePacket;
  exports.AcceptInvitePacket = AcceptInvitePacket;

}).call(this);
