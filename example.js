// Generated by CoffeeScript 1.6.3
(function() {
  var LolClient, client, options, summoner, util;

  LolClient = require('./lol-client');

  util = require('util');

  // options = {
  //   region: 'euw',
  //   username: 'quisquilia', // LOWERCASE OR IT WILL NOT WORK. Please add a function to convert to lowercase just in case.
  //   password: 'dermochelys1004',
  //   version: '4.14.14_08_11_13_42',
  //   debug: false
  // };

  options = {
    region: 'euw',
    username: 'sinrival', // LOWERCASE OR IT WILL NOT WORK. Please add a function to convert to lowercase just in case.
    password: 'zenlol123',
    version: '4.14.14_08_11_13_42',
    debug: false
  };

  summoner = {
    name: 'HotshotGG',
    acctId: 434582,
    summonerId: 407750,
    teamId: "TEAM-a1ebba15-986f-488a-ae2f-e081b2886ba4"
  };

  client = new LolClient(options);

  client.on('connection', function() {
    
    setInterval(client.HeartBeat, 5000);
    console.log('Connected');

   //  setInterval(function()
   //  {
   //    client.checkPendingInvitations(null, function(err, result) 
   //      {
   //        return console.log(util.inspect(result, false, null, true));
   //      });
   // }, 5000);
    

//     client.getSummonerByName("an average buu", function(err, result)
//     {
//       sum_id = result.object.summonerId.value;


      client.doCreateGame('Zen InHouse Royal Rumble', function(err, result) {
 
          //return console.log(util.inspect(result, false, null, true));
          game_id = result.object.id.value;


          setTimeout(
            function()
            {
              client.PlayerToObserver(game_id, function(err, result)
          {
            return console.log(util.inspect(result, false, null, true));
          });
            }, 15000);

      

          client.getSummonerByName("an average buu", function(err, result)
          {
              sum_id = result.object.summonerId.value;
              client.doInvite(sum_id, function(err, result) {});
          });

          client.getSummonerByName("DMX512", function(err, result)
          {
              sum_id = result.object.summonerId.value;
              client.doInvite(sum_id, function(err, result) {});
          });

          client.getSummonerByName("HunterAntor", function(err, result)
          {
              sum_id = result.object.summonerId.value;
              client.doInvite(sum_id, function(err, result) {});
          });

          client.getSummonerByName("WaruiiKagemusha", function(err, result)
          {
              sum_id = result.object.summonerId.value;
              client.doInvite(sum_id, function(err, result) {});
          });

        });


//           client.doInvite(sum_id, function(err, result) {





            
          
            // setTimeout(function()
            //   {
            //      client.doTransferOwnership(sum_id, function(err, result) {
        
            // });
            //    }, 7000);
           
 //       });
     
    //  client.getSummonerByName("an average buu", function(err, result) {
    //   return console.log(util.inspect(result, false, null, true));
    //  });
     
    // console.log("creating game");
    // client.doCreateGame("an average buu", function(err, result) {
    //   return console.log(util.inspect(result, false, null, true));
    //  });


    // client.getSummonerByName("an average buu", function(err, result) {
    //   return console.log(util.inspect(result, false, null, true));
    // });
/*    client.getSummonerStats(summoner.acctId, function(err, result) {
      return console.log(util.inspect(result, false, null, true));
    });
    client.getMatchHistory(summoner.acctId, function(err, result) {
      return console.log(util.inspect(result, false, null, true));
    });
    client.getAggregatedStats(summoner.acctId, function(err, result) {
      return console.log(util.inspect(result, false, null, true));
    });
    client.getTeamsForSummoner(summoner.summonerId, function(err, result) {
      return console.log(util.inspect(result, false, null, true));
    });
    client.getTeamById(summoner.teamId, function(err, result) {
      return console.log(util.inspect(result, false, null, true));
    });
    return client.getSummonerData(summoner.acctId, function(err, result) {
      return console.log(util.inspect(result, false, null, true));
    });*/
  });

  client.connect();

}).call(this);
