{
  "name": "simple-xmpp",
  "version": "0.1.18",
  "directories": {
    "lib": "./lib"
  },
  "main": "./lib/simple-xmpp",
  "description": "Simple High Level NodeJS XMPP Library",
  "author": {
    "name": "Arunoda Susiripala",
    "email": "arunoda.susiripala@gmail.com"
  },
  "homepage": "https://github.com/arunoda/node-simple-xmpp",
  "licenses": [
    {
      "type": "The MIT License",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "node-xmpp": "0.10.x",
    "qbox": "0.1.x"
  },
  "devDependencies": {
    "ltx": ">= 0.0.5",
    "nodemock": ">= 0.2.13",
    "horaa": ">= 0.1.1alpha"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:arunoda/node-simple-xmpp.git"
  },
  "readme": "Node Simple XMPP\n================\nSimple High Level NodeJS XMPP Library\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/simple-xmpp/node-simple-xmpp/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\nDependencies\n------------\n\tsudo apt-get install libexpat1 libexpat1-dev libicu-dev\n\nInstall\n-------\n\tnpm install simple-xmpp\n\nExample\n-------\n\n```javascript\nvar xmpp = require('simple-xmpp');\n\nxmpp.on('online', function() {\n\tconsole.log('Yes, I\\'m connected!');\n});\n\nxmpp.on('chat', function(from, message) {\n\txmpp.send(from, 'echo: ' + message);\n});\n\nxmpp.on('error', function(err) {\n\tconsole.error(err);\n});\n\nxmpp.on('subscribe', function(from) {\nif (from === 'a.friend@gmail.com') {\n\txmpp.acceptSubscription(from);\n\t}\n});\n\nxmpp.connect({\n\t\tjid\t\t\t\t\t: username@gmail.com,\n\t\tpassword\t\t: password,\n\t\thost\t\t\t\t: 'talk.google.com',\n\t\tport\t\t\t\t: 5222\n});\n\nxmpp.subscribe('your.friend@gmail.com');\n// check for incoming subscription requests\nxmpp.getRoster();\n```\n\nDocumentation\n-------------\n\n### Events\n\n#### Online\nEvent emitted when successfully connected\n\n```javascript\nxmpp.on('online', function() {\n\tconsole.log('Yes, I\\'m online');\n});\n```\n\n#### Close\nevent where the connection has been closed\n\n```javascript\nxmpp.on('close', function() {\n\tconsole.log('connection has been closed!');\n});\n```\n\n#### Chat\nEvent emitted when somebody sends a chat message to you\n\n```javascript\nxmpp.on('chat', function(from, message) {\n\tconsole.log('%s says %s', from, message);\n});\n```\n\t\n#### Chat State\nevent emitted when a buddys chatstate changes [ 'active', 'composing', 'paused', 'inactive', 'gone' ]\n\n```javascript\nxmpp.on('chatstate', function(from, state) {\n\tconsole.log('% is currently %s', from, state);\n});\n```\n\n#### Group Chat\nevent where emits when somebody sends a group chat message to you\n\n```javascript\nxmpp.on('groupchat', function(conference, from, message, stamp) {\n\tconsole.log('%s says %s on %s on %s at %s', from, message, conference, stamp.substr(0,9), stamp.substr(10));\n});\n```\n\n#### Buddy\nEvent emitted when state of the buddy on your chat list changes\n\n```javascript\n/**\n\t@param jid - is the id of buddy (eg:- hello@gmail.com)\n\t@param state - state of the buddy. value will be one of the following constant can be access via require('simple-xmpp').STATUS\n\t\tAWAY - Buddy goes away\n\t\t\tDND - Buddy set its status as \"Do Not Disturb\" or\t \"Busy\",\n\t\t\tONLINE - Buddy comes online or available to chat\n\t\t\tOFFLINE - Buddy goes offline\n\t@param statusText - status message of the buddy (known as \"custom message\" in Gmail). \n\t\t\t\t\t\t\t\t\t\t\t`null` if the buddy has not specified any status text.\n*/\nxmpp.on('buddy', function(jid, state, statusText) {\n\tconsole.log('%s is in %s state - %s', jid, state, statusText);\n});\n```\n\t\n#### Buddy capabilities\nEvent emitted when a buddy's client capabilities are retrieved. Capabilities specify which additional\nfeatures supported by the buddy's XMPP client (such as audio and video chat). See \n[XEP-0115: Entity Capabilities](http://xmpp.org/extensions/xep-0115.html) for more information.\n\n```javascript\nxmpp.on('buddyCapabilities', function(jid, data) {\n\t// data contains clientName and features\n\tconsole.log(data.features);\n});\n```\n\n#### Stanza\naccess core stanza element when such received\nFires for every incoming stanza\n\n```javascript\n/**\n\t@param stanza - the core object\n\txmpp.on('stanza', function(stanza) {\n\t\tconsole.log(stanza);\n\t});\n*/\n```\n\n### Methods\n\nSend Chat Messages\n\n```javascript\n/**\n\t@param to - Address to send (eg:- abc@gmail.com - room@conference.domain.tld)\n\t@param message - message to be sent\n\t@param group - if true, send the message in a group chat\n*/\n\nxmpp.send(to, message, group);\n```\n\nSend Friend requests\n\n```javascript\n/**\n\t@param to - Address to send (eg:- your.friend@gmail.com)\n*/\nxmpp.subscribe(to);\n```\n\nAccept Friend requests\n\n```javascript\n/**\n\t@param from - Address to accept (eg:- your.friend@gmail.com)\n*/\nxmpp.acceptSubscription(from);\n```\n\nUnsubscribe Friend\n\n```javascript\n/**\n\t@param to - Address to unsubscribe (eg:- no.longer.friend@gmail.com)\n*/\nxmpp.unsubscribe(to);\n```\n\nAccept unsubscription requests\n\n```javascript\n/**\n\t@param from - Address to accept (eg:- no.longer.friend@gmail.com)\n*/\nxmpp.acceptUnsubscription(from);\n```\n\nSet presence\n\n```javascript\n/**\n\t@param show - Your current presence state ['away', 'dnd', 'xa', 'chat']\n\t@param status - (optional) free text as your status message\n*/\nxmpp.setPresence('away', 'Out to lunch');\n```\n\t\nSet chatstate\n\n```javascript\n/**\n\t@param to - The target JID (ie. person you are chatting with) to receive the chatstate\n\t@param state - Your current chatstate [ 'active', 'composing', 'paused', 'inactive', 'gone' ]\n*/\nxmpp.setChatstate('user@host.com', 'composing');\n```\n\nGet vCard\n\n```javascript\n/*\n\t@param buddy - The JID to use \n\t@param callback - The function to call when the vCard is retreived. The returned data will be a JSON object\n*/\nxmpp.getVCard('user@host.com', function (vcard) {\n\tconsole.log('user@host.com vcard: ', vcard);\n});\n```\n\nProbe the state of the buddy\n\n```javascript\n/**\n\t@param jid - Buddy's id (eg:- abc@gmail.com)\n\t@param state -\tState of the buddy.\t value will be one of the following constant can be access via require('simple-xmpp').STATUS\n\t\tAWAY - Buddy goes away\n\t\tDND - Buddy set its status as \"Do Not Disturb\" or\t \"Busy\",\n\t\tONLINE - Buddy comes online or available to chat\n\t\tOFFLINE - Buddy goes offline\n*/\n\nxmpp.probe(jid, function(state) {\n\n});\n```\n\nDisconnect session\n\n```javascript\n/**\n\tno params\n*/\n\nxmpp.disconnect();\n\n\n### Fields\nFields provided Additional Core functionalies\n\n#### xmpp.conn\nThe underlying connection object\n\n```javascript\nvar xmpp = simpleXMPP.connect({});\nxmpp.conn; // the connection object\n```\n\n#### xmpp.Element\nXMPP Element class (from node-xmpp)\n\n```javascript\nvar xmpp = simpleXMPP.connect({});\nxmpp.Element; // the connection object\n```\n\n\n### Guides\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/arunoda/node-simple-xmpp/issues"
  },
  "_id": "simple-xmpp@0.1.18",
  "dist": {
    "shasum": "e449dda8596af80789ecfd298c64d351a4b4915a"
  },
  "_from": "simple-xmpp@",
  "_resolved": "https://registry.npmjs.org/simple-xmpp/-/simple-xmpp-0.1.18.tgz"
}
