var sqlite3	= require('sqlite3').verbose();
var util = require('util');
var datetime = require('datetime');
var sanitizer = require('sanitizer');

//var db = new sqlite3.Database('/Users/Tibi/Desktop/git/ZenBot/quisquilia_db');
var db = new sqlite3.Database('quisquilia_db');

exports.connect = function()
{
	var db = new sqlite3.Database('quisquilia_db');
	return db;
};

exports.disconnect = function(db)
{
	db.close();
};

exports.create = function()
{

	// Conference
	db.run("CREATE TABLE IF NOT EXISTS conference (id INTEGER PRIMARY KEY AUTOINCREMENT, conference TEXT, name TEXT)");

	// Game
	db.run("CREATE TABLE IF NOT EXISTS game (id INTEGER PRIMARY KEY AUTOINCREMENT, creator TEXT, conference TEXT, map TEXT, type TEXT, spots INTEGER, date TEXT, active INTEGER)");

	// Player
	db.run("CREATE TABLE IF NOT EXISTS player (id INTEGER PRIMARY KEY AUTOINCREMENT, id_game INTEGER, conference TEXT, name TEXT, active INTEGER, points INTEGER)");

	// Seen
	db.run("CREATE TABLE IF NOT EXISTS seen (id INTEGER PRIMARY KEY AUTOINCREMENT, player TEXT, account TEXT, conference TEXT, date TEXT, global INTEGER, greeting TEXT, is_online INTEGER, permission INTEGER DEFAULT 1)");

	// Reddit posts
	db.run("CREATE TABLE IF NOT EXISTS reddit (id INTEGER PRIMARY KEY AUTOINCREMENT, url TEXT)");

	// tracked games
	db.run("CREATE TABLE IF NOT EXISTS tracked_games (id INTEGER PRIMARY KEY AUTOINCREMENT, gameid INTEGER, date TEXT, gotpoints INTEGER)");
};

exports.addGame = function(conference, creator, map, type, spots)
{
	// escape map for SqlLite
	map = map.replace("\'","\'\'");

	// Game
	var query = 'INSERT INTO game ( conference, creator, map, type, spots, date, active) VALUES ("' + conference + '", "' + creator + '", "' + map + '", "' + type + '",' + spots + ',datetime("now"),1)';
	db.run(query);

};

exports.updateSpots = function(id, spots)
{
	// Game
	var query = "UPDATE game set spots = " + spots + " WHERE id = " + id;
	db.run(query);
};

exports.addPlayer = function(conference, creator, player)
{
	this.getGame(conference, creator, function(game_id)
	{
		// Player
		db.run("INSERT INTO player (id_game, name, active) VALUES (" + game_id + ", '" + player + "', 1)");
	});
};

/**
 * Get id of active game by creator
 * @param  {[type]} creator [description]
 * @return {[type]}         [description]
 */
exports.getGame = function(conference, creator, callback)
{
	var game_id = null;
	//db.get(" WHERE creator = '" + creator + "' and conference = '" + conference + "' and active = 1", function(err, row)
	db.get("SELECT id FROM game WHERE creator = '" + creator + "' and active = 1", function(err, row)
	{
		if(row !== null && row !== undefined)
		{
			game_id = row.id;
			if(row !== null && row !== undefined)
			{
				callback(game_id);
			  	return;
			}
		}
		else
		{
			callback(null);
		}
	});
};

exports.getSpotsLeft = function(game_id)
{

};

exports.addSpot = function(game_id)
{

};

exports.removeSpot = function(game_id)
{

};

/**
 * Start the game in conference for creator
 * @param  {[type]} conference [description]
 * @param  {[type]} creator    [description]
 * @return {[type]}            [description]
 */
exports.startGame = function(id)
{
	// active = 0 for all games made by creator and active
	// Since it's canceled maybe if should be delete, so it doesn't appear in the stats
	var query = "UPDATE game SET active = 2 WHERE id = " + id;
	db.run(query);
};

/**
 * Cancel the game in conference for creator
 * @param  {[type]} conference [description]
 * @param  {[type]} creator    [description]
 * @return {[type]}            [description]
 */
exports.cancelGame = function(conference, creator)
{
	// active = 0 for all games made by creator and active
	// Since it's canceled maybe if should be delete, so it doesn't appear in the stats
	db.run("UPDATE game SET active = 0 WHERE active = 1 and conference = '" + conference + "' and creator = '" + creator + "'");
	//db.run("DELETE FROM game WHERE creator = '" + creator + "' and active = 1");
};

exports.cancelPlayer = function(player)
{
	// remove player from his active game
};

exports.getAllActiveGames = function(conference, global, callback)
{
	var query = "";
	if(global)
	{
		query = "SELECT game.id, date, creator, map, type, spots, name FROM game, conference WHERE game.conference = conference.conference AND active = 1 group by game.conference";
	}
	else
	{
		query = "SELECT id, date, creator, map, type, spots, conference, '' as name FROM game WHERE conference = '" + conference + "' and active = 1";
	}

	db.all(query, function(err, rows)
	{
		var list = "";
		var last_conference = "";
		rows.forEach(function(row)
		{
			// Header for conferences
			if(global & last_conference != row.name)
			{
				list = "### Channel " + row.name + " ###\n";
				last_conference = row.name;
			}

			// check if game lived for more than one hour we cancel it
			// var difference = date2 - date1;
			var now = new Date();
			var gametime = new Date(row.date);
			var diff = now.getTime() - gametime.getTime(); // this is a time in milliseconds
			var diff_as_date = new Date(diff);
			if(diff_as_date.getMinutes() > 30)
			{
				db.run("DELETE FROM game WHERE creator = '" + row.creator + "' and active = 1");
			}
			else
			{
				list += "#" + row.id + " | " + row.map.replace("''","'") + " | " + row.type + " | " + row.spots + " left\n";
				list += "created by " + row.creator + " " + datetime.formatAgo(new Date(row.date)) + "\n";
				list += "\n";
			}
		});

		callback(list);
	});
};

exports.getGameDetails = function(game_id, callback)
{
	var query = "";
	query = "SELECT id, date, creator, map, type, spots FROM game WHERE id = " + game_id + " and active = 1";

	db.get(query, function(err, row)
	{
		if(row !== null) callback(row);
		else callback(null);
	});
};

exports.getStats = function(callback)
{
	var query = "";
	query = "SELECT count(id) as count FROM game WHERE active = 2";

	db.get(query, function(err, row)
	{
		if(row !== null) callback(row.count);
		else callback(0);
	});
};

exports.getTotaleGamesServed = function()
{

};

/**
 * Set last time a player was seen in conference
 * @param {[type]} conference [description]
 * @param {[type]} player     [description]
 */
exports.setSeen = function(conference, player, account, isOnline)
{
	console.log("Set Seen " + player + " " + account);
	var query = "SELECT count(date) as cnt FROM seen WHERE conference = '" + conference + "' AND player = '" + player + "'";
	db.each(query, function(err, row)
	{
		if(row.cnt > 0)
		{
			// UPDATE
			var query = "UPDATE seen SET account = '" + account + "', date = datetime('now'), is_online = " + isOnline + " WHERE conference = '" + conference  +"' AND player = '" + player + "'";
			console.log(query);
			db.run(query);
		}
		else
		{
			// INSERT
			var query = "INSERT INTO seen (conference, player, account, date, global, is_online) VALUES ('" + conference + "', '" + player + "','" + account + "', datetime('now'), 1," + isOnline + ")";
			db.run(query);
		}
	});
};

/**
 * Sets the global flag
 * @param {[type]} conference [description]
 * @param {[type]} player     [description]
 */
exports.setGlobal = function(player, global)
{
	// UPDATE
	if(global)
	{
		var query = "UPDATE seen SET global = 1 WHERE player = '" + player + "'";
	}
	else
	{
		var query = "UPDATE seen SET global = 0 WHERE player = '" + player + "'";
	}
	db.run(query);
};


/**
 * Get the global flag
 * @param {[type]} conference [description]
 * @param {[type]} player     [description]
 */
exports.getGlobal = function(player, callback)
{
	var query = "SELECT global FROM seen WHERE player = '" + player + "'";
	db.get(query, function(err, row)
	{
		if(row !== null && row !== undefined) callback(row.global);
		else callback(null);
	});
};

/**
 * Get the greeting message the player set for himself
 *@param {[type]} player		 [name of player submitting the query]
 *@param {function} callback [description]
 */
exports.getGreeting = function(account, callback) {
	console.log("Looking for greet for " + account);
	var query   = "SELECT greeting FROM seen WHERE UPPER(account) like '" + account.toUpperCase() + "%'";
	var greet = "";
	db.get(query, function(err, row) {
		if (row !== null && row !== undefined) {
			greet = row.greeting;
			callback(greet);
		}
		else {
			callback(null);
		}
	});
};

/**
* Set the greeting message the player wants
*@param {[type]} player		  [name of player submitting the query]
*@param {function} callback [description]
*/
exports.setGreeting = function(account, greeting, callback) 
{	
	if (account !== undefined && account !== null) 
	{
		//var greetingClean = greeting.replace("'","''");
		var greetingClean = sanitizer.escape(greeting);
		var query = "UPDATE seen SET greeting = '" + greetingClean + "' WHERE UPPER(account) like '" + account.toUpperCase() + "%'";
		var message = "";

		if (greetingClean.length > 0) 
		{
			db.run(query);
			message = "Your greeting has been set to '" + greeting + "'";
			callback(message);
		}
		else {
			var query = "SELECT greeting FROM seen WHERE UPPER(account) like '" + account.toUpperCase() + "%'";
			var message = "";
			db.get(query, function(err, row) 
			{
				if (row !== null && row !== undefined && row !== "") {
					message = "Your current greeting is: " + row.greeting;
					callback (message);
				}
				else 
				{
					message = "You do not have any welcome message set.";
					callback(message);
				}
			});
		}
	}
	else
	{
		message = "Do I Know you ?";
	}
};

/**
* Remove the greeting message
*@param {[type]} player		  [name of player submitting the query]
*@param {function} callback [description]
*/
exports.removeGreeting = function(account, callback) {
	if (account !== undefined && account !== null) {
		var query = "UPDATE seen SET greeting = '' WHERE UPPER(account) like '" + account.toUpperCase() + "%'";
		var message = "";
		db.run(query);
		message = "Greeting removed.";
		callback(message);
	}
};

/**
* Grant permission to change greeting message
*@param {[type]} player   	[name of player whose permissions are being changed]
*@param {function} callback [description]
*/
exports.grantPermission = function(player, callback) {
	var query = "UPDATE seen SET permission = 1 WHERE UPPER(player) = '" + player.toUpperCase() + "'";
	db.run(query);
	callback();
};

/**
* Revoke permission to change greeting message
*@param {[type]} player 		[name of player whose permissions are being changed]
*@param {function} callback [description]
*/

exports.revokePermission = function(player, callback) {
	var query = "UPDATE seen SET permission = 0 WHERE UPPER(player) = '" + player.toUpperCase() + "'";
	db.run(query);
	callback();
};

/**
* Gets the value of the permission column
*@param {[type]} player		  [name of player whose permissions are being changed]
*@param {function} callback [description]
*/
exports.getPermission = function(player, callback) {
	var query = "SELECT permission FROM seen WHERE UPPER(player) = '" + player.toUpperCase() + "'";
	db.get(query, function(err, row) {
		if (row !== null && row !== undefined) {
			callback(row.permission);
		}
		else {
			callback(null);
		}
	});
};

/**
 * Get last time player was seen in conference
 * @param  {[type]}   conference [description]
 * @param  {[type]}   player     [description]
 * @param  {Function} callback   [description]
 * @return {[type]}              [description]
 */
exports.getSeen = function(conference, player, callback)
{
	var query = "SELECT date, is_online FROM seen WHERE conference = '" + conference + "' AND UPPER(player) = '" + player.toUpperCase() + "'";
	var message = "";
	db.get(query, function(err, row)
	{
		if(row !== null && row !== undefined)
		{

			if(row.is_online == 1)
			{
				message += player + " is online right now.";
			}
			else
			{
				var date = new Date(row.date);
				message += player +" was last seen " + datetime.formatAgo(date) +  ".";
			}
		}
		else
		{
			message = "I don't know this " + player + " dude.";
		}
		callback(message);
	});
};

exports.getAccount = function(player, callback)
{
	var query = "SELECT account FROM seen WHERE player = '"+ player +"'";
	db.get(query, function(err, row)
	{
		if(row !== null && row !== undefined)
		{
			var account = row.account.split('/')[0];
			callback(account);
			console.log(account);
		}
		else
		{
			callback(null);
		}
	});
};

exports.getName = function(account, callback)
{
	var name = "";
	var query = "SELECT player FROM seen WHERE account like '" + account + "%'";
	db.get(query, function(err, row)
	{
		if(row !== null && row !== undefined)
		{
			callback(row.player);
		}
	});
};


/**
 * Get a list of the active conferences
 * @param  {Function} callback [description]
 * @return {[type]}            [description]
 */
exports.getConferences = function(callback)
{
	var query = "SELECT conference, name FROM conference";

	db.each(query, function(err, row)
	{
		if(row!==null) callback(row.conference, row.name);
	});
};

/**
 * Get a list of the active conferences
 * @param  {Function} callback [description]
 * @return {[type]}            [description]
 */
exports.getActiveConferences = function(callback)
{
	var query = "SELECT conference, name FROM conference";

	db.all(query, function(err, rows)
	{
		var list = "";
		rows.forEach(function(row)
		{
			list += row.name + "\n";
		});

		callback(list);

	});
};

exports.getConferenceName = function(conference, callback)
{
	var query = "SELECT name FROM conference WHERE conference = '" + conference + "'";

	db.get(query, function(err, row)
	{
		var name = "";
		if(row!==null) name = row.name;
		callback(name);
	});
};

/**
 * Save a joined conference
 * @param  {[type]}   conference [description]
 * @param  {Function} callback   [description]
 * @return {[type]}              [description]
 */
exports.joinConference = function(conference, name, callback)
{
	// INSERT
	var query = "INSERT INTO conference (conference, name) VALUES ('" + conference + "', '" + name + "')";
	db.run(query);
	callback();
};

/**
 * Deletes a parted conference
 * @param  {[type]}   conference [description]
 * @param  {Function} callback   [description]
 * @return {[type]}              [description]
 */
exports.partConference = function(conference, callback)
{
	// DELETE
	var query = "DELETE FROM conference WHERE conference = '" + conference + "'";
	db.run(query);
	callback();
};

exports.trackGame = function(gameId, callback)
{
	var query = "INSERT INTO tracked_games (gameid, date, gotpoints) VALUES (" + gameId + ", datetime('now'), 0)";
	db.run(query);
	callback();
};

exports.getActiveTrackedGames = function(callback)
{
	var query = "SELECT gameid, date FROM tracked_games WHERE gotpoints = 0 ORDER BY date";

	db.all(query, function(err, rows)
	{
		var list = "";
		rows.forEach(function(row)
		{
			list += row.name + "\n";
		});

		callback(list);

	});
};

exports.setGameTrackedAndPointsCalculated = function(gameId, callback)
{
	var query = "UPDATE tracked_games SET gotpoints = 1 WHERE gameid = " + gameid;
	db.run(query);
	callback();
};

/*

var sqlite3 = require('sqlite3').verbose();

db.serialize(function() {
  db.run("CREATE TABLE lorem (info TEXT)");

  var stmt = db.prepare("INSERT INTO lorem VALUES (?)");
  for (var i = 0; i < 10; i++) {
      stmt.run("Ipsum " + i);
  }
  stmt.finalize();

  db.each("SELECT rowid AS id, info FROM lorem", function(err, row) {
      console.log(row.id + ": " + row.info);
  });
});

db.close();

 */
